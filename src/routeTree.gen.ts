/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ServicesLazyImport = createFileRoute('/services')()
const MetricsLazyImport = createFileRoute('/metrics')()
const LogsLazyImport = createFileRoute('/logs')()
const AlertsLazyImport = createFileRoute('/alerts')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ServicesLazyRoute = ServicesLazyImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/services.lazy').then((d) => d.Route))

const MetricsLazyRoute = MetricsLazyImport.update({
  id: '/metrics',
  path: '/metrics',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/metrics.lazy').then((d) => d.Route))

const LogsLazyRoute = LogsLazyImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/logs.lazy').then((d) => d.Route))

const AlertsLazyRoute = AlertsLazyImport.update({
  id: '/alerts',
  path: '/alerts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/alerts.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/alerts': {
      id: '/alerts'
      path: '/alerts'
      fullPath: '/alerts'
      preLoaderRoute: typeof AlertsLazyImport
      parentRoute: typeof rootRoute
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsLazyImport
      parentRoute: typeof rootRoute
    }
    '/metrics': {
      id: '/metrics'
      path: '/metrics'
      fullPath: '/metrics'
      preLoaderRoute: typeof MetricsLazyImport
      parentRoute: typeof rootRoute
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/alerts': typeof AlertsLazyRoute
  '/logs': typeof LogsLazyRoute
  '/metrics': typeof MetricsLazyRoute
  '/services': typeof ServicesLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/alerts': typeof AlertsLazyRoute
  '/logs': typeof LogsLazyRoute
  '/metrics': typeof MetricsLazyRoute
  '/services': typeof ServicesLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/alerts': typeof AlertsLazyRoute
  '/logs': typeof LogsLazyRoute
  '/metrics': typeof MetricsLazyRoute
  '/services': typeof ServicesLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/alerts' | '/logs' | '/metrics' | '/services'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/alerts' | '/logs' | '/metrics' | '/services'
  id: '__root__' | '/' | '/alerts' | '/logs' | '/metrics' | '/services'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AlertsLazyRoute: typeof AlertsLazyRoute
  LogsLazyRoute: typeof LogsLazyRoute
  MetricsLazyRoute: typeof MetricsLazyRoute
  ServicesLazyRoute: typeof ServicesLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AlertsLazyRoute: AlertsLazyRoute,
  LogsLazyRoute: LogsLazyRoute,
  MetricsLazyRoute: MetricsLazyRoute,
  ServicesLazyRoute: ServicesLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/alerts",
        "/logs",
        "/metrics",
        "/services"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/alerts": {
      "filePath": "alerts.lazy.tsx"
    },
    "/logs": {
      "filePath": "logs.lazy.tsx"
    },
    "/metrics": {
      "filePath": "metrics.lazy.tsx"
    },
    "/services": {
      "filePath": "services.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
